#include <array>
#include <iostream>
#include <string>
#include <cassert>
#include <vector>

#include <uncertainties/internal/checkmoments.hpp>

int main(const int argc, const char *const *const argv) {
    if (argc > 1 and argc != 8) {
        std::cerr << "Invalid number of arguments. Usage:\n";
        std::cerr << argv[0] << " sigma k3 k4 k5 k6 k7 k8\n";
        std::cerr << "(k_n is the standardized moment mu_n / sigma^n)\n";
        return 1;
    }
    
    using MomentsVector = std::vector<std::pair<std::array<double, 6>, std::string>>;
    MomentsVector std_moments_vector;
    double sigma = 1.432987561283756192783;
    
    if (argc == 8) {
        sigma = std::stod(argv[1]);
        assert(sigma >= 0);
        const std::array<double, 6> std_moments {
            std::stod(argv[2]),
            std::stod(argv[3]),
            std::stod(argv[4]),
            std::stod(argv[5]),
            std::stod(argv[6]),
            std::stod(argv[7])
        };
        std_moments_vector = MomentsVector {
            {std_moments, "user_defined"}
        };
    } else {
        std_moments_vector = MomentsVector {
            // written manually
            // generated with dev/scipymoments.py
            {{ 0.000000000000000e+00,  2.193750230045810e+00,  0.000000000000000e+00,  6.307464518351152e+00,  0.000000000000000e+00,  2.089842143605476e+01}, "anglit"},
            {{-1.374677761397093e-15,  1.500000000000648e+00, -2.855240539539878e-15,  2.500000000006676e+00, -5.710481079079755e-15,  4.375000000040987e+00}, "arcsine"},
            {{-4.203979006661760e-01,  2.306106586517433e+00, -2.401538376980557e+00,  7.714387209802071e+00, -1.227409781769712e+01,  3.230234798950539e+01}, "argus"},
            {{ 5.656854249492382e-01,  2.400000000000000e+00,  3.232488142567076e+00,  8.857142857142861e+00,  1.697056274847715e+01,  4.160000000000002e+01}, "beta"},
            {{ 2.393417858997477e-01,  1.862753541523876e+00,  1.043117800515642e+00,  4.312283112177668e+00,  3.770708129670418e+00,  1.130784371593390e+01}, "bradford"},
            {{ 4.056950772626715e-01,  3.059295089399554e+00,  3.909491946824366e+00,  1.739515608079365e+01,  4.052581111168719e+01,  1.569803094595993e+02}, "chi"},
            {{ 8.944271909999155e-01,  4.199999999999998e+00,  1.109089716839895e+01,  4.579999999999998e+01,  1.894396790537821e+02,  9.136399999999995e+02}, "chi2"},
            {{ 0.000000000000000e+00,  2.406237124401720e+00,  0.000000000000000e+00,  8.033107300728211e+00,  0.000000000000000e+00,  3.210895347595000e+01}, "cosine"},
            {{ 0.000000000000000e+00,  3.333333333333335e+00,  0.000000000000000e+00,  2.333333333333335e+01,  0.000000000000000e+00,  2.800000000000002e+02}, "dgamma"},
            {{ 0.000000000000000e+00,  2.000000000000000e+00,  0.000000000000000e+00,  6.000000000000000e+00,  0.000000000000000e+00,  2.400000000000000e+01}, "dweibull"},
            {{ 2.000000000000000e+00,  9.000000000000002e+00,  4.400000000000001e+01,  2.650000000000001e+02,  1.854000000000000e+03,  1.483300000000000e+04}, "expon"},
            {{ 1.152069638313938e+00,  5.875739644970417e+00,  2.109173645528594e+01,  1.112266727355033e+02,  6.366991251413222e+02,  4.260154511396660e+03}, "exponnorm"},
            {{ 1.443018742885296e-01,  2.916620697907702e+00,  1.421872037810624e+00,  1.399773065059918e+01,  1.420477187613419e+01,  9.446377344841353e+01}, "exponweib"},
            {{-7.996816282072437e-02,  2.355798704472346e+00, -3.353097872836812e-01,  7.639635809949493e+00, -1.081109795606021e+00,  2.965452075728869e+01}, "exponpow"},
            {{ 2.518518518518572e+00,  1.285185185185180e+01,  7.713580246913584e+01,  5.702400548696919e+02,  4.964241426611791e+03,  4.980798308184728e+04}, "fatiguelife"},
            {{ 1.879105754584661e-02,  2.940610025577012e+00,  3.302465491425197e-01,  1.390203748897559e+01,  4.842768251638423e+00,  8.848519792614236e+01}, "foldnorm"},
            {{ 5.771840025973655e-01,  4.332675511075347e+00,  8.796559191783279e+00,  4.866244906904266e+01,  1.906728110497943e+02,  1.112419348006789e+03}, "genlogistic"},
            {{ 0.000000000000000e+00,  2.305197417170408e+00,  0.000000000000000e+00,  7.532301401602690e+00,  0.000000000000000e+00,  3.066472285630520e+01}, "gennorm"},
            {{ 1.558209836032660e+00,  6.780542855264994e+00,  2.825765501191453e+01,  1.502538636221089e+02,  9.177347339633483e+02,  6.419732973880627e+03}, "genexpon"},
            {{ 1.154700538379252e+00,  5.000000000000003e+00,  1.616580753730953e+01,  7.166666666666670e+01,  3.452554609753964e+02,  1.896999999999746e+03}, "gamma"},
            {{ 5.978271350466868e-02,  2.857225515906674e+00,  6.392418424521026e-01,  1.304324619278369e+01,  6.650380648400196e+00,  8.072851306852142e+01}, "gengamma"},
            {{ 6.184877138634218e+00,  1.139363921776051e+02,  5.215977014368461e+03,  6.194384868955223e+05,  1.949406911671746e+08,  1.647082722285542e+11}, "gilbrat"},
            {{ 1.010125734156103e+00,  3.753230654956891e+00,  9.260001561187531e+00,  3.066070273614897e+01,  1.021833487962241e+02,  3.730641831155965e+02}, "gompertz"},
            {{ 1.139547099404653e+00,  5.399999999999991e+00,  1.856661598538669e+01,  9.141424734618681e+01,  4.931498916956295e+02,  3.091022944253579e+03}, "gumbel_r"},
            {{-1.139547099404653e+00,  5.399999999999991e+00, -1.856661598538669e+01,  9.141424734618681e+01, -4.931498916956295e+02,  3.091022944253579e+03}, "gumbel_l"},
            {{ 9.952717464311586e-01,  3.869177303606004e+00,  9.896966346585272e+00,  3.476177935541727e+01,  1.245213878107983e+02,  4.953978799440135e+02}, "halfnorm"},
            {{ 6.327758511185098e-01,  2.841515913822089e+00,  4.870427468322759e+00,  1.527386968129090e+01,  3.963720036171044e+01,  1.234311073294849e+02}, "halfgennorm"},
            {{ 0.000000000000000e+00,  5.000000000000003e+00,  0.000000000000000e+00,  6.100000000000002e+01,  0.000000000000000e+00,  1.385000000000001e+03}, "hypsecant"},
            {{ 3.000000000000104e+00,  1.799999999999990e+01,  1.350000000000001e+02,  1.274999999999999e+03,  1.449000000000001e+04,  1.928850000000000e+05}, "invgauss"},
            {{ 0.000000000000000e+00,  5.999999999999999e+00,  0.000000000000000e+00,  8.999999999999997e+01,  0.000000000000000e+00,  2.519999999999999e+03}, "laplace"},
            {{ 3.761250603026065e-16,  4.200000000000001e+00,  5.071868925236719e-15,  3.985714285714286e+01,  1.051209903294108e-13,  6.858000000000001e+02}, "logistic"},
            {{-1.035919976644915e+00,  5.020236578764479e+00, -1.600684299570175e+01,  7.636658267260194e+01, -3.896678157964968e+02,  2.327567997706484e+03}, "loggamma"},
            {{ 4.856928280495909e-01,  3.108163842816296e+00,  4.642979865519745e+00,  1.866866492994786e+01,  4.855583865547229e+01,  1.810911663140202e+02}, "maxwell"},
            {{ 1.535141590722907e+00,  7.000000000000003e+00,  2.961232004341132e+01,  1.625665970356616e+02,  1.020973368362676e+03,  7.358845112401205e+03}, "moyal"},
            {{ 6.762848427722848e-01,  3.300696203799757e+00,  6.433293472225520e+00,  2.298191741858393e+01,  7.051140073252003e+01,  2.609528751822280e+02}, "nakagami"},
            {{ 0.000000000000000e+00,  3.000000000000005e+00,  0.000000000000000e+00,  1.500000000000000e+01,  0.000000000000000e+00,  1.050000000000000e+02}, "norm"},
            {{ 1.139753528477388e+00,  6.464101615137752e+00,  2.455827541429880e+01,  1.474519052838328e+02,  9.530968562856007e+02,  7.437902700278833e+03}, "norminvgauss"},
            {{ 1.000000000302479e+00,  4.499999999394173e+00,  1.300000000121339e+01,  5.499999999756978e+01,  2.430000000726666e+02,  1.235499999855199e+03}, "pearson3"},
            {{ 2.393417858997484e-01,  1.862753541523877e+00,  1.043117800515645e+00,  4.312283112177676e+00,  3.770708129670429e+00,  1.130784371593392e+01}, "reciprocal"},
            {{ 6.311106578190736e-01,  3.245089300687638e+00,  5.997969288502222e+00,  2.179105809171146e+01,  6.481657048417622e+01,  2.388265888542778e+02}, "rayleigh"},
            {{ 4.544693815370049e-01,  2.930596525635642e+00,  4.095598493513753e+00,  1.596415545492245e+01,  3.890097958030331e+01,  1.374664823718727e+02}, "rice"},
            {{ 0.000000000000000e+00,  1.999999999995189e+00,  0.000000000000000e+00,  4.999999999999769e+00,  0.000000000000000e+00,  1.399999999999761e+01}, "semicircular"},
            {{-2.391933082665460e-02,  3.006028161013639e+00, -2.390817249766078e-01,  1.509430615515463e+01, -2.512718210851153e+00,  1.063756010820516e+02}, "skewnorm"},
            {{ 0.000000000000000e+00,  4.000000000000000e+00,  0.000000000000000e+00,  3.999999999999999e+01,  0.000000000000000e+00,  1.119999999999999e+03}, "t"},
            {{ 6.384207794190290e-02,  2.022320860210693e+00,  3.779208079596722e-01,  5.300426892174850e+00,  1.806110727912262e+00,  1.608401975423991e+01}, "trapz"},
            {{ 3.560874150046195e-01,  2.399999971389194e+00,  2.034785361431682e+00,  8.167134781472743e+00,  1.068256736701236e+01,  3.387196350736040e+01}, "triang"},
            {{ 9.634681056331822e-01,  3.132297995454179e+00,  6.261534965445733e+00,  1.642029342804775e+01,  4.018104274985134e+01,  1.049048422930964e+02}, "truncexpon"},
            {{-1.556661789761165e-01,  2.275002446880146e+00, -9.693451338586150e-01,  6.900292847631023e+00, -5.091315648191496e+00,  2.446010477214697e+01}, "truncnorm"},
            {{ 5.481456321918090e-17,  1.800000000000000e+00,  1.117370096036793e-16,  3.857142857142859e+00,  3.718939564401180e-16,  9.000000000000005e+00}, "uniform"},
            {{ 3.000000000000104e+00,  1.799999999999990e+01,  1.350000000000001e+02,  1.274999999999999e+03,  1.449000000000001e+04,  1.928850000000000e+05}, "wald"},
            {{ 5.086956691981936e-01,  3.040664799148528e+00,  4.668289436691043e+00,  1.776138292185108e+01,  4.630433038382748e+01,  1.655949969677136e+02}, "weibull_min"},
            {{-1.345932950297855e+00,  5.432257378437289e+00, -1.875638173411538e+01,  8.258976108327212e+01, -4.009375927192170e+02,  2.179189762992663e+03}, "weibull_max"},
            {{ 2.339377560439094e-16,  1.361490812261402e+00,  5.587228929520455e-16,  2.042878242450591e+00,  1.150867896773673e-15,  3.230744266235025e+00}, "wrapcauchy"},
        };
    }
    
    bool problems = false;
    for (const auto &row : std_moments_vector) {
        const std::string &name = row.second;
        const std::array<double, 6> &std_moments = row.first;
        
        double c = uncertainties::internal::check_std_moments(std_moments);
        if (c < 0) {
            std::cerr << "std moments problems with " << name << "\nmoments:";
            for (const double m : std_moments) {
                std::cerr << " " << m;
            }
            std::cerr << "\n";
            std::cerr << "condition: " << c << "\n";
            problems = true;
        }

        std::array<double, 7> moments;
        double sn = sigma * sigma;
        moments[0] = sn;
        for (int i = 1; i < moments.size(); ++i) {
            sn *= sigma;
            moments[i] = std_moments[i - 1] * sn;
        }
        
        c = uncertainties::internal::check_moments(moments);
        if (c < 0) {
            std::cerr << "moments problems with " << name << "\nmoments:";
            for (const double m : moments) {
                std::cerr << " " << m;
            }
            std::cerr << "\n";
            std::cerr << "condition: " << c << "\n";
            problems = true;
        }
    }
    
    return problems;
}
